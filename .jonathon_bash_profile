# Add following line to bash
# source ~/Projects/LinuxHelp/.jonathon_bash_profile
alias myGrep='grep -r --color=always'
#----------git-----------
alias GitGraph='git log --graph --decorate --oneline --all' # --since=1.days || 1.years ....
GitWhatTheHeckHappened() {
  git diff $1^ $1
}
GitPushToOrigin() {
  if [ -z "$CURRENT_BRANCH" ]; then
    echo "No branch set. Are you sure this is a git repository??"
  else
    git push --set-upstream origin "$CURRENT_BRANCH"
  fi
}
#----------git-----------

#----------search/replace-----------
Replace() {
  if [ "$#" -eq 2 ]; then
    find ./ -type f -exec sed -i 's/'$1'/'$2'/g' {} \;
  else
    echo "find ./ -type f -exec sed -i 's/$1/$2/g' {} \;"
  fi
}
ReplaceConfirmation() {
  if [ "$#" -eq 2 ]; then
    find ./ -type f -exec vi -c 's/'$1'/'$2'/gc' -c 'wq' {} \;
  else
    echo "find ./ -type f -exec sed -i 's/$1/$2/g' {} \;"
  fi
}
Rename() {
  if [[ $# -eq 2 ]]; then
    find ./ -name '*'$1'*' -exec bash -c 'mv "$0" "${0/'$1'/'$2'}"' {} \;
  else
    echo "need 2 argumens ($#) for find ./ -name '*$1*' -exec bash -c 'mv \"$0\" \"${0/$1/$2}\"' {} \;"
  fi
}
#----------search/replace-----------

#--------helpful git-------

PROMPT_COMMAND=set_prompt

function set_prompt {
# Shorten the path if it's too long (longer than $m)
local p=$(pwd) b s m=30 psssh='' scr=''
if [ -n "$STY" ]; then
  # get the last 'sty.something.something.what-i-want' 'what-i-want'
  scr="\[\e[96m\][$(echo $STY | rev | cut -d "." -f 1 | rev)]"
  m=22
fi
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  psssh="\[\e[94m\]${USER}@$(hostname | cut -d "." -f 1):"
  m=15
fi
p=${p/#$HOME/\~}
s=${#p}
while [[ $p != "${p//\/}" ]]&&(($s>$m))
do
  p=${p#/}
  [[ $p =~ \.?. ]]
  b=$b/${BASH_REMATCH[0]}
  p=${p#*/}
  ((s=${#b}+${#p}))
done
p=${b/\/~/\~}${b+/}$p

# Display user@hostname:pwd process
# echo -ne "\033]0;${USER}@${HOSTNAME}: ${p}\007"
# Fill in a git status data if in git repo
# mapfile -t l < <(git status --porcelain -b 2> /dev/null)
while IFS= read -r line; do
    l+=("$line")
done < <(git status --porcelain -b 2> /dev/null)
local reset="\[\e[0m\]" b_color="\[\e[38;5;104m\]"
local psst="$psssh$scr\[\e[39m\]$p$reset" psen="\[\e[1;39m\]\$$reset "
# br -> branch, la -> local ahead, lb -> local behind
local br="" la="" lb="" i
# local ~ uncommited
# ln -> local new, cn -> commited new, lc -> local change , cc -> commited change, ld -> local deleted, cd -> comitted delete, cr -> commited rename
local ln="" cn="" lc="" cc="" ld="" cd="" cr=""
if [ ${#l} != '0' ]; then
  br=${l[0]:3} && br=${br%...*}
  la=${l[0]#*[ahead } && la=${la%% *} && [[ ${la:(-1)} != '#' ]] && la=${la:0:${#la}-1} || la=""
  lb=${l[0]#*behind } && lb=${lb%% *} && [[ ${lb:(-1)} != '#' ]] && lb=${lb:0:${#lb}-1} || lb=""
  for i in "${l[@]:1}"; do
    [[ ${i:1:1} == '?' ]] && ln='n' # local new file
    [[ ${i:0:1} == 'A' ]] && cn='N' # commited new file
    [[ ${i:1:1} == 'M' ]] && lc='c' # local changes
    [[ ${i:0:1} == 'M' ]] && cc='C' # commited changes
    [[ ${i:1:1} == 'D' ]] && ld='d' # local file deleted
    [[ ${i:0:1} == 'D' ]] && cd='D' # commited file delete
    [[ ${i:0:1} == 'R' ]] && cr='R' # commited Renamed file (there is not uncommited rename)
    [[ ${i:0:1} == '#' ]] && lcon='A' # local conflicts
     # âˆ‚
  done

  unset l

  CURRENT_BRANCH="$br"
  local bashStuff="$b_color[$br\[\e[0;32m\]$la\[\e[1;33m\]$lb$reset\[\e[1;91m\]$ln$lc$ld\[\e[1;96m\]$cn$cc$cd$cr$b_color]$reset"
  # Set prompt variable with git indicator
  if [ ${#CURRENT_BRANCH} -ge 10 ]; then
    PS1="$bashStuff\n$psst$psen"
  else
    PS1="$psst$bashStuff$psen"
  fi
else
  # Set prompt variable without git indicator
  PS1="$psst$psen"
  CURRENT_BRANCH=""
fi
}
#--------helpful git-------
